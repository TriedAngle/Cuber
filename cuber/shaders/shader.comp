#version 460

const int RAY_BOUNCES = 4;

struct Chunk {
    uint voxels[16];
    uint palette_chunk;
    uint lod;
};

struct PaletteChunk {
    uint chunk_materials[128];
    uint palette;
    uint lod_materil; // TODO: implement this
};

struct Brick {
    uint info;
};

struct Material {
    vec3 albedo;
    float reflectivity;
    float metallicity;
    float transparency;
    float emission;
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Chunks {
    Chunk chunks[];
};

layout(std430, binding = 1) buffer PaletteChunks {
    PaletteChunk palette_chunks[];
};

layout(std430, binding = 2) buffer Bricks {
    Brick bricks[];
};

layout(std430, binding = 3) buffer Palettes {
    uint palettes[];
};

layout(std430, binding = 4) buffer Materials {
    Material materials[];
};

// TODO: use rgba16ui or srgba8_alpha for albedo and rgba8 for normal
// also investigate how the a part can be dropped in both
// its' just a bit annoying because I can't reuse the shader then :(
layout (rgba32f, binding = 0) uniform image2D albedoTexture;
layout (r16f, binding = 1) uniform image2D depthTexture;
layout (rgba16f, binding = 2) uniform image2D normalTexture;

uniform vec3 cameraPos;
uniform vec3 cameraDir;
uniform vec3 cameraU;
uniform vec3 cameraV;
uniform uint timer;
uniform float randomSeed;
uniform uvec2 resolution;
uniform uvec3 brickGridSize;

uint hash(uint x) {
    x += (x << 10u);
    x ^= (x >>  6u);
    x += (x <<  3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}
uint hash(uvec2 v) {
    return hash(v.x^hash(v.y));
}
uint hash(uvec3 v) {
    return hash(v.x^hash(v.y)^hash(v.z));
}
uint hash(uvec4 v) {
    return hash(v.x^hash(v.y)^hash(v.z)^hash(v.w));
}
float random(float f) {
    const uint mantissaMask = 0x007FFFFFu;
    const uint one = 0x3F800000u;
   
    uint h = hash(floatBitsToUint(f));
    h &= mantissaMask;
    h |= one;
    
    float  r2 = uintBitsToFloat(h);
    return r2 - 1.0;
}
float random(vec2 v) {
    return random(floatBitsToUint(hash(uvec2(v.x, v.y))));
}
float random(vec3 v) {
    return random(floatBitsToUint(hash(uvec3(v.x, v.y, v.z))));
}
float random(vec4 v) {
    return random(floatBitsToUint(hash(uvec4(v.x, v.y, v.z, v.w))));
}

bool hitVoxel(Chunk chunk, ivec3 pos) {
    uint index = pos.x + pos.y * 8 + pos.z * 64;
    uint array_index = index / 32;
    uint bit_index = index % 32;
    uint voxel = (chunk.voxels[array_index] >> bit_index) & 1;
    return voxel == 1;
}

uint palette_material(PaletteChunk chunk, ivec3 pos) {
    uint index = pos.x + pos.y * 8 + pos.z * 64;
    uint array_index = index / 4;
    uint byte_index = index % 4;
    uint material = (chunk.chunk_materials[array_index] >> (8 * byte_index)) & 0xFF;
    return material;
}

uint materialIds[8];
uint currentRayIndex = 0;

struct RayHit {
    vec3 pos;
    bool hit;
    bvec3 mask;
};

float aabbIntersect(const vec3 b_min, const vec3 b_max, const vec3 origin, const vec3 inv_dir) {
    const vec3 t0 = (b_min - origin) * inv_dir;
    const vec3 t1 = (b_max - origin) * inv_dir;

    const vec3 v_min = min(t0, t1);
    const vec3 v_max = max(t0, t1);

    const float t_min = max(v_min.x, max(v_min.y, v_min.z));
    const float t_max = min(v_max.x, min(v_max.y, v_max.z));

    if (!(t_max < t_min) && (t_max >= 0)) return max(0, t_min);
    return -1;
}

Brick getBrick(ivec3 gridPos) {
    uint index = gridPos.z * brickGridSize.x * brickGridSize.y + gridPos.y * brickGridSize.y + gridPos.x;
    return bricks[index]; 
}

RayHit traceBrickGrid(vec3 rayPos, vec3 rayDir) {
    const vec3 invRayDir = 1.0 / rayDir;
    const vec3 deltaDist = abs(invRayDir);

    const vec3 raySign = sign(rayDir);
    const vec3 deltaDistPartial = ((raySign * 0.5) + 0.5) * deltaDist;
    const vec3 deltaDistSign = raySign * deltaDist;

    const vec3 rayPos8 = rayPos / 8.0;
    const vec3 rayPos8Floor = floor(rayPos8); 

    vec3 gridPos = ivec3(rayPos8Floor);
    vec3 sideDist = (rayPos8Floor - rayPos8) * deltaDistSign + deltaDistPartial;
    vec3 mask;

    while (
        gridPos.x >=   0.0 && gridPos.y >=   0.0 && gridPos.z >=   0.0 &&
        gridPos.x  < brickGridSize.x && gridPos.y  < brickGridSize.y && gridPos.z  < brickGridSize.z
    ) {
        Brick brick = getBrick(ivec3(gridPos));
        if (brick.info != 0) {
            Chunk chunk = chunks[brick.info];
            const vec3 bounds = gridPos * 8.0;
            const vec3 boundsMax = bounds + 8.0;

            const float intersect = aabbIntersect(bounds, boundsMax, rayPos, invRayDir);

            rayPos += rayDir * (intersect + 0.0001);
            vec3 voxelPos = floor(rayPos);

            sideDist = (voxelPos - rayPos) * deltaDistSign + deltaDistPartial;
            while (
                voxelPos.x >= bounds.x    && voxelPos.y >=     bounds.y && voxelPos.z >=     bounds.z &&
                voxelPos.x  < boundsMax.x && voxelPos.y  < boundsMax.y  && voxelPos.z  < boundsMax.z
            ) {
                ivec3 chunkPos = ivec3(mod(voxelPos, 8.0));
                if (hitVoxel(chunk, chunkPos)) {
                    PaletteChunk palette_chunk = palette_chunks[chunk.palette_chunk];
                    uint palette_material = palette_material(palette_chunk, chunkPos);
                    uint material_index = palettes[palette_chunk.palette + palette_material - 1];
                    materialIds[currentRayIndex] = material_index;
                    return RayHit(voxelPos, true, bvec3(mask));
                }
                mask = vec3(lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy)));
                sideDist += mask * deltaDist;
                voxelPos += mask * raySign;
            }

            sideDist = (gridPos - rayPos / 8.0) * deltaDistSign + deltaDistPartial;
        }

        mask = vec3(lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy)));
        sideDist += mask * deltaDist;
        gridPos += mask * raySign;
    }

    return RayHit(vec3(0.0), false, bvec3(0));
}

void main() { 
    ivec2 texPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 res = vec2(resolution);
    float aspectRatio = res.x / res.y;
    vec2 screenPos = vec2(gl_GlobalInvocationID.xy) / res * 2.0 - 1.0;
    screenPos.x *= aspectRatio;

    const vec3 cameraPlaneU = cameraU;
	const vec3 cameraPlaneV = cameraV;

    vec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;
    vec3 rayPos = cameraPos;

    const float intersect = aabbIntersect(vec3(0.001), vec3(brickGridSize * 8 - 1), rayPos, 1.0 / rayDir); 

    vec3 normal = vec3(0.0);
    vec3 albedo = vec3(0.52, 0.80, 0.92);
    float depth = 1.0;
    if (intersect >= 0) {
        rayPos = rayDir * (intersect + 0.001) + rayPos;
        const RayHit hit = traceBrickGrid(rayPos, rayDir);
        if (hit.hit) {
            depth = pow(distance(rayPos, hit.pos) / 16.0, 2);
            albedo = materials[materialIds[0]].albedo;

            if (hit.mask.x) {
                if (rayDir.x >= 0.0) normal = vec3(1.0, 0.0, 0.0);
                else normal = vec3(-1.0, 0.0, 0.0);
            } else if (hit.mask.y) {
                albedo /= 1.2;
                if (rayDir.y >= 0.0) normal = vec3(0.0, 1.0, 0.0);
                else normal = vec3(0.0, -1.0, 0.0);
            } else if (hit.mask.z) {
                albedo /= 1.5;
                if (rayDir.z >= 0.0) normal = vec3(0.0, 0.0, 1.0);
                else normal = vec3(0.0, 0.0, -1.0);
            }
        }
    }

    imageStore(albedoTexture, texPos, vec4(albedo, 1.0));
    imageStore(depthTexture, texPos, vec4(depth));
    imageStore(normalTexture, texPos, vec4(normal, 1.0));
}
