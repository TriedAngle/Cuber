#version 450

const int MAX_RAY_STEPS = 128;
const float gridScale = 4.0;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (rgba32f, binding = 0) uniform image2D imgOutput;

float sdSphere(vec3 p, float d) { 
    return length(p) - d; 
} 

float sdBox( vec3 p, vec3 b ) {
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}
	
bool getVoxel(ivec3 c) {
	// vec3 p = vec3(0.0, 0.0, 0.0)
    vec3 p = vec3(0.0, 0.0, 0.0) - c;
    float d = 1e10;
	d = min(d, max(-sdSphere(p, 23.5), sdBox(p, vec3(20.0))));
	return d < 0.0;
}

void main ( ) { 
    ivec2 texPos = ivec2(gl_GlobalInvocationID.xy);
    
    vec2 screenPos = vec2(gl_GlobalInvocationID.xy) / vec2(1280.0, 720.0) * 2.0 - 1.0;
    vec3 cameraDir = vec3(0.0, 1.0, 0.8);
    vec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);
	vec3 cameraPlaneV = vec3(0.0, 1.0, 0.0);

    vec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;
    vec3 rayPos = vec3(0.0, 0.0, 0.0);

    rayPos /= gridScale;

    ivec3 mapPos = ivec3(floor(rayPos + 0.0));
    vec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);

    ivec3 rayStep = ivec3(sign(rayDir));

    vec3 sideDist = 
        (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist;

    bool hit = false;
    bvec3 mask;
    for (int i = 0; i < MAX_RAY_STEPS; i++) {
        if(getVoxel(mapPos)) {
            hit = true;
            break; 
        }
        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));
        sideDist += vec3(mask) * deltaDist;
        mapPos += ivec3(vec3(mask)) * rayStep;
    }
    if (!hit) {
        imageStore(imgOutput, texPos, vec4(0.0));
        return;
    }
	vec3 color;
	if (mask.x) {
		color = vec3(0.5);
	}
	if (mask.y) {
		color = vec3(1.0);
	}
	if (mask.z) {
		color = vec3(0.75);
	}

    vec4 value = vec4(color, 1.0);
    
    imageStore(imgOutput, texPos, value);
}
